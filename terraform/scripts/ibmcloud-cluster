#!/usr/bin/env bash

SCRIPT_DIR=$(cd $(dirname $0); pwd -P)
ROOT_DIR=$(cd "${SCRIPT_DIR}/../.."; pwd -P)
SETTINGS_DIR=$(cd "${SCRIPT_DIR}/../settings"; pwd -P)

function prop {
    grep "${1}" "${2}" | cut -d '=' -f2
}

source ${SETTINGS_DIR}/environment.tfvars

RESOURCE_GROUP="${resource_group_name}"
if [[ -z "${RESOURCE_GROUP}" ]]; then
  echo "resource_group_name is required in environment.tfvars"
  exit 1
fi

REGION="${region}"
if [[ -z "${REGION}" ]]; then
  echo "region is required in environment.tfvars"
  exit 1
fi

APIKEY="${IBMCLOUD_API_KEY}"
if [[ -z "${APIKEY}" ]]; then
  if [[ -f ${ROOT_DIR}/credentials.properties ]]; then
    APIKEY=$(prop 'ibmcloud.api.key' "${ROOT_DIR}/credentials.properties")
  else
    echo "${ROOT_DIR}/credentials.properties not found"
  fi
fi

if [[ -z "${APIKEY}" ]]; then
  echo "APIKEY is required either as IBMCLOUD_API_KEY environment variable or in credentials.properties"
  exit 1
fi

ibmcloud config --check-version=false 1> /dev/null 2> /dev/null

echo "Logging into ibmcloud: ${REGION}/${RESOURCE_GROUP}"
ibmcloud login \
  --apikey ${APIKEY} \
  -g ${RESOURCE_GROUP} \
  -r ${REGION} 1> /dev/null 2> /dev/null

if [[ -n "${cluster_name}" ]]; then
  CLUSTER_NAME="${cluster_name}"
elif [[ -n "${name_prefix}" ]]; then
  CLUSTER_NAME="${name_prefix}-cluster"
else
  CLUSTER_NAME="${RESOURCE_GROUP}-cluster"
fi

echo "  Determining cluster type for cluster: ${CLUSTER_NAME}"
OPENSHIFT=$(ibmcloud ks cluster get --cluster "${CLUSTER_NAME}" | grep Version | grep openshift)
if [[ -z "${OPENSHIFT}" ]]; then
  export IKS_BETA_VERSION=1.0

  echo "Logging into IKS cluster: ${CLUSTER_NAME}"
  ibmcloud ks cluster config --cluster "${CLUSTER_NAME}" 1> /dev/null 2> /dev/null
else
  echo "  Getting OpenShift server url"
  SERVER_URL=$(ibmcloud ks cluster get --cluster "${CLUSTER_NAME}" | grep "Public Service Endpoint URL" | sed -E "s/.*(http.*)/\1/g" | xargs -I{} echo -n {})

  echo "Logging into OpenShift cluster: ${CLUSTER_NAME}"
  oc login -u apikey -p ${APIKEY} --server=${SERVER_URL} 1> /dev/null 2> /dev/null
fi
